====================vue 双向绑定下数组的深度赋值====================

关键词：vue 深度赋值

1 一般情况下
数组属于引用类型，可以使用JS常用的方法进行赋值。
示例：
this.oldData=[{id:1,value:"小红"},{id:2,value:"小黄"}];
现在想修改oldData中的第一条数据，把"小红"改为"小蓝"
var newData = this.oldData.slice(); //复制oldData给一个新的数组newData
newData[0]={id:1,value:"小蓝"}
console.log(oldData,newData); //结果为[{id:1,value:"小红"},{id:2,value:"小黄"}]，[{id:1,value:"小蓝"},{id:2,value:"小黄"}]

2 双向绑定下
踩坑现场：
我想在表格中使用表单控件，通过双向绑定修改数组的内容，在用户取消勾选时，表格控件恢复成原来的数据。这个时候需要对原数据进行存储，然后在用户取消勾选时
把原数据替换回来。结果使用上面的方法时发现，连我存储的原数据也跟着改变了！！！！！排查发现，这是vue双向绑定底层逻辑深度穿透到原数据。
这总要用方法解决吧，在疯狂搜索度娘和拼命尝试的情况底下，终于找到了解决问题的方法：
示例：
var storedData = JSON.parse(JSON.stringfy(this.oldData)); //先把原来的数据存储一份（发现使用修改数据类型存储的方法是最深度的存储方法）
-----中间经过用户输入双向绑定改变数组-----
this.$set(this.oldData,index,storedData[index]); //只有使用这种方法才能改变，具体使用方法请教度娘
