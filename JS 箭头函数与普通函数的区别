====================箭头函数与普通函数的区别====================

箭头函数的格式
var fun = () => {
  console.log("hahaha");
}

1.箭头函数是匿名函数，不能用new构造函数
var fun = () => {
  console.log("hahaha");
}
var function = new fun();

2.箭头函数不接受arguments参数,取而代之的是...（rest参数）

（1）普通函数
function fun(a){
  console.log(arguments);
};
fun(1,2,3,4,5,6); //结果为1,2,3,4,5,6

（2）箭头函数
var fun = (a)=>{
  console.log(arguments);
}
fun(1,2,3,4,5,6); //结果为 arguments is not defined

var fun = (...a) =>{
  console.log(a)
}
fun(1,2,3,4,5,6); //结果为1,2,3,4,5,6

3.箭头函数不绑定this，会捕获其所在对象的上下文的this值，作为自己的this值

（1）示例1
var obj = {
  a: 10,
  b: () => {
    console.log(this.a); // undefined
    console.log(this); // Window {postMessage: ƒ, blur: ƒ, focus: ƒ, close: ƒ, frames: Window, …}
  },
  c: function() {
    console.log(this.a); // 10
    console.log(this); // {a: 10, b: ƒ, c: ƒ}
  }
}
obj.b(); 
obj.c();

（2）示例2
var obj = {
  a: 10,
  b: function(){
    console.log(this.a); //10
  },
  c: function() {
     return ()=>{
           console.log(this.a); //10
     }
  }
}
obj.b(); 
obj.c();

4.箭头函数使用call()和apply()方法无法改变箭头函数的指向
let obj2 = {
  a: 10,
  b: function(n) {
      let f = (n) => n + this.a;
      return f(n);
  },
  c: function(n) {
      let f = (n) => n + this.a;
      let m = {
          a: 20
      };
      return f.call(m,n);
  }
};
console.log(obj2.b(1));  // 11
console.log(obj2.c(1)); // 11 值没有发生改变

5.箭头函数没有原型属性，如prototype
